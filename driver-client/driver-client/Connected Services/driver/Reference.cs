//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace driver_client.driver {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Base", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(driver_client.driver.Calendars))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(driver_client.driver.UserInfo))]
    public partial class Base : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Calendars", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.SerializableAttribute()]
    public partial class Calendars : driver_client.driver.Base {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] AvailableDaysField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] DatesUnavailableField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EndTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StartTimeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] AvailableDays {
            get {
                return this.AvailableDaysField;
            }
            set {
                if ((object.ReferenceEquals(this.AvailableDaysField, value) != true)) {
                    this.AvailableDaysField = value;
                    this.RaisePropertyChanged("AvailableDays");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] DatesUnavailable {
            get {
                return this.DatesUnavailableField;
            }
            set {
                if ((object.ReferenceEquals(this.DatesUnavailableField, value) != true)) {
                    this.DatesUnavailableField = value;
                    this.RaisePropertyChanged("DatesUnavailable");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EndTime {
            get {
                return this.EndTimeField;
            }
            set {
                if ((object.ReferenceEquals(this.EndTimeField, value) != true)) {
                    this.EndTimeField = value;
                    this.RaisePropertyChanged("EndTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StartTime {
            get {
                return this.StartTimeField;
            }
            set {
                if ((object.ReferenceEquals(this.StartTimeField, value) != true)) {
                    this.StartTimeField = value;
                    this.RaisePropertyChanged("StartTime");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserInfo", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.SerializableAttribute()]
    public partial class UserInfo : driver_client.driver.Base {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ConfirmedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsAdminField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhoneField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double RatingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RatingTextField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RewiewField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TeacherIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UsernameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Confirmed {
            get {
                return this.ConfirmedField;
            }
            set {
                if ((this.ConfirmedField.Equals(value) != true)) {
                    this.ConfirmedField = value;
                    this.RaisePropertyChanged("Confirmed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsAdmin {
            get {
                return this.IsAdminField;
            }
            set {
                if ((this.IsAdminField.Equals(value) != true)) {
                    this.IsAdminField = value;
                    this.RaisePropertyChanged("IsAdmin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Phone {
            get {
                return this.PhoneField;
            }
            set {
                if ((object.ReferenceEquals(this.PhoneField, value) != true)) {
                    this.PhoneField = value;
                    this.RaisePropertyChanged("Phone");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Rating {
            get {
                return this.RatingField;
            }
            set {
                if ((this.RatingField.Equals(value) != true)) {
                    this.RatingField = value;
                    this.RaisePropertyChanged("Rating");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RatingText {
            get {
                return this.RatingTextField;
            }
            set {
                if ((object.ReferenceEquals(this.RatingTextField, value) != true)) {
                    this.RatingTextField = value;
                    this.RaisePropertyChanged("RatingText");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Rewiew {
            get {
                return this.RewiewField;
            }
            set {
                if ((object.ReferenceEquals(this.RewiewField, value) != true)) {
                    this.RewiewField = value;
                    this.RaisePropertyChanged("Rewiew");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TeacherId {
            get {
                return this.TeacherIdField;
            }
            set {
                if ((this.TeacherIdField.Equals(value) != true)) {
                    this.TeacherIdField = value;
                    this.RaisePropertyChanged("TeacherId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="AllUsers", Namespace="http://schemas.datacontract.org/2004/07/Model", ItemName="UserInfo")]
    [System.SerializableAttribute()]
    public class AllUsers : System.Collections.Generic.List<driver_client.driver.UserInfo> {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="driver.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetUserID", ReplyAction="http://tempuri.org/IService1/GetUserIDResponse")]
        int GetUserID(string username, string table);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetUserID", ReplyAction="http://tempuri.org/IService1/GetUserIDResponse")]
        System.Threading.Tasks.Task<int> GetUserIDAsync(string username, string table);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetUserById", ReplyAction="http://tempuri.org/IService1/GetUserByIdResponse")]
        driver_client.driver.UserInfo GetUserById(int id, string table);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetUserById", ReplyAction="http://tempuri.org/IService1/GetUserByIdResponse")]
        System.Threading.Tasks.Task<driver_client.driver.UserInfo> GetUserByIdAsync(int id, string table);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllUsers", ReplyAction="http://tempuri.org/IService1/GetAllUsersResponse")]
        driver_client.driver.AllUsers GetAllUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllUsers", ReplyAction="http://tempuri.org/IService1/GetAllUsersResponse")]
        System.Threading.Tasks.Task<driver_client.driver.AllUsers> GetAllUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CheckUserPassword", ReplyAction="http://tempuri.org/IService1/CheckUserPasswordResponse")]
        bool CheckUserPassword(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CheckUserPassword", ReplyAction="http://tempuri.org/IService1/CheckUserPasswordResponse")]
        System.Threading.Tasks.Task<bool> CheckUserPasswordAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CheckUserAdmin", ReplyAction="http://tempuri.org/IService1/CheckUserAdminResponse")]
        bool CheckUserAdmin(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CheckUserAdmin", ReplyAction="http://tempuri.org/IService1/CheckUserAdminResponse")]
        System.Threading.Tasks.Task<bool> CheckUserAdminAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CheckUserExist", ReplyAction="http://tempuri.org/IService1/CheckUserExistResponse")]
        bool CheckUserExist(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CheckUserExist", ReplyAction="http://tempuri.org/IService1/CheckUserExistResponse")]
        System.Threading.Tasks.Task<bool> CheckUserExistAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetTeacherCalendar", ReplyAction="http://tempuri.org/IService1/GetTeacherCalendarResponse")]
        driver_client.driver.Calendars GetTeacherCalendar(int teacherId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetTeacherCalendar", ReplyAction="http://tempuri.org/IService1/GetTeacherCalendarResponse")]
        System.Threading.Tasks.Task<driver_client.driver.Calendars> GetTeacherCalendarAsync(int teacherId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SetTeacherCalendar", ReplyAction="http://tempuri.org/IService1/SetTeacherCalendarResponse")]
        bool SetTeacherCalendar(driver_client.driver.Calendars cal, int teacherId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SetTeacherCalendar", ReplyAction="http://tempuri.org/IService1/SetTeacherCalendarResponse")]
        System.Threading.Tasks.Task<bool> SetTeacherCalendarAsync(driver_client.driver.Calendars cal, int teacherId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/TeacherConfirm", ReplyAction="http://tempuri.org/IService1/TeacherConfirmResponse")]
        void TeacherConfirm(int id, int tid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/TeacherConfirm", ReplyAction="http://tempuri.org/IService1/TeacherConfirmResponse")]
        System.Threading.Tasks.Task TeacherConfirmAsync(int id, int tid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllTeacher", ReplyAction="http://tempuri.org/IService1/GetAllTeacherResponse")]
        driver_client.driver.AllUsers GetAllTeacher();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllTeacher", ReplyAction="http://tempuri.org/IService1/GetAllTeacherResponse")]
        System.Threading.Tasks.Task<driver_client.driver.AllUsers> GetAllTeacherAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetTeacherReviews", ReplyAction="http://tempuri.org/IService1/GetTeacherReviewsResponse")]
        string[] GetTeacherReviews(int tid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetTeacherReviews", ReplyAction="http://tempuri.org/IService1/GetTeacherReviewsResponse")]
        System.Threading.Tasks.Task<string[]> GetTeacherReviewsAsync(int tid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateRating", ReplyAction="http://tempuri.org/IService1/UpdateRatingResponse")]
        void UpdateRating(int tid, int rating, string rewiew);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateRating", ReplyAction="http://tempuri.org/IService1/UpdateRatingResponse")]
        System.Threading.Tasks.Task UpdateRatingAsync(int tid, int rating, string rewiew);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/IsConfirmed", ReplyAction="http://tempuri.org/IService1/IsConfirmedResponse")]
        bool IsConfirmed(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/IsConfirmed", ReplyAction="http://tempuri.org/IService1/IsConfirmedResponse")]
        System.Threading.Tasks.Task<bool> IsConfirmedAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetTeacherStudents", ReplyAction="http://tempuri.org/IService1/GetTeacherStudentsResponse")]
        driver_client.driver.UserInfo[] GetTeacherStudents(int tid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetTeacherStudents", ReplyAction="http://tempuri.org/IService1/GetTeacherStudentsResponse")]
        System.Threading.Tasks.Task<driver_client.driver.UserInfo[]> GetTeacherStudentsAsync(int tid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateTeacherId", ReplyAction="http://tempuri.org/IService1/UpdateTeacherIdResponse")]
        void UpdateTeacherId(int sid, int tid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateTeacherId", ReplyAction="http://tempuri.org/IService1/UpdateTeacherIdResponse")]
        System.Threading.Tasks.Task UpdateTeacherIdAsync(int sid, int tid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SetCalendars", ReplyAction="http://tempuri.org/IService1/SetCalendarsResponse")]
        void SetCalendars(string[] AVailableDays, string startDate, string endDate, string[] datesUnavailable, driver_client.driver.Calendars calendars);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SetCalendars", ReplyAction="http://tempuri.org/IService1/SetCalendarsResponse")]
        System.Threading.Tasks.Task SetCalendarsAsync(string[] AVailableDays, string startDate, string endDate, string[] datesUnavailable, driver_client.driver.Calendars calendars);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddUser", ReplyAction="http://tempuri.org/IService1/AddUserResponse")]
        bool AddUser(string name, string password, string email, string phone, bool admin, int tID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddUser", ReplyAction="http://tempuri.org/IService1/AddUserResponse")]
        System.Threading.Tasks.Task<bool> AddUserAsync(string name, string password, string email, string phone, bool admin, int tID);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : driver_client.driver.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<driver_client.driver.IService1>, driver_client.driver.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int GetUserID(string username, string table) {
            return base.Channel.GetUserID(username, table);
        }
        
        public System.Threading.Tasks.Task<int> GetUserIDAsync(string username, string table) {
            return base.Channel.GetUserIDAsync(username, table);
        }
        
        public driver_client.driver.UserInfo GetUserById(int id, string table) {
            return base.Channel.GetUserById(id, table);
        }
        
        public System.Threading.Tasks.Task<driver_client.driver.UserInfo> GetUserByIdAsync(int id, string table) {
            return base.Channel.GetUserByIdAsync(id, table);
        }
        
        public driver_client.driver.AllUsers GetAllUsers() {
            return base.Channel.GetAllUsers();
        }
        
        public System.Threading.Tasks.Task<driver_client.driver.AllUsers> GetAllUsersAsync() {
            return base.Channel.GetAllUsersAsync();
        }
        
        public bool CheckUserPassword(string username, string password) {
            return base.Channel.CheckUserPassword(username, password);
        }
        
        public System.Threading.Tasks.Task<bool> CheckUserPasswordAsync(string username, string password) {
            return base.Channel.CheckUserPasswordAsync(username, password);
        }
        
        public bool CheckUserAdmin(string username) {
            return base.Channel.CheckUserAdmin(username);
        }
        
        public System.Threading.Tasks.Task<bool> CheckUserAdminAsync(string username) {
            return base.Channel.CheckUserAdminAsync(username);
        }
        
        public bool CheckUserExist(string username) {
            return base.Channel.CheckUserExist(username);
        }
        
        public System.Threading.Tasks.Task<bool> CheckUserExistAsync(string username) {
            return base.Channel.CheckUserExistAsync(username);
        }
        
        public driver_client.driver.Calendars GetTeacherCalendar(int teacherId) {
            return base.Channel.GetTeacherCalendar(teacherId);
        }
        
        public System.Threading.Tasks.Task<driver_client.driver.Calendars> GetTeacherCalendarAsync(int teacherId) {
            return base.Channel.GetTeacherCalendarAsync(teacherId);
        }
        
        public bool SetTeacherCalendar(driver_client.driver.Calendars cal, int teacherId) {
            return base.Channel.SetTeacherCalendar(cal, teacherId);
        }
        
        public System.Threading.Tasks.Task<bool> SetTeacherCalendarAsync(driver_client.driver.Calendars cal, int teacherId) {
            return base.Channel.SetTeacherCalendarAsync(cal, teacherId);
        }
        
        public void TeacherConfirm(int id, int tid) {
            base.Channel.TeacherConfirm(id, tid);
        }
        
        public System.Threading.Tasks.Task TeacherConfirmAsync(int id, int tid) {
            return base.Channel.TeacherConfirmAsync(id, tid);
        }
        
        public driver_client.driver.AllUsers GetAllTeacher() {
            return base.Channel.GetAllTeacher();
        }
        
        public System.Threading.Tasks.Task<driver_client.driver.AllUsers> GetAllTeacherAsync() {
            return base.Channel.GetAllTeacherAsync();
        }
        
        public string[] GetTeacherReviews(int tid) {
            return base.Channel.GetTeacherReviews(tid);
        }
        
        public System.Threading.Tasks.Task<string[]> GetTeacherReviewsAsync(int tid) {
            return base.Channel.GetTeacherReviewsAsync(tid);
        }
        
        public void UpdateRating(int tid, int rating, string rewiew) {
            base.Channel.UpdateRating(tid, rating, rewiew);
        }
        
        public System.Threading.Tasks.Task UpdateRatingAsync(int tid, int rating, string rewiew) {
            return base.Channel.UpdateRatingAsync(tid, rating, rewiew);
        }
        
        public bool IsConfirmed(int id) {
            return base.Channel.IsConfirmed(id);
        }
        
        public System.Threading.Tasks.Task<bool> IsConfirmedAsync(int id) {
            return base.Channel.IsConfirmedAsync(id);
        }
        
        public driver_client.driver.UserInfo[] GetTeacherStudents(int tid) {
            return base.Channel.GetTeacherStudents(tid);
        }
        
        public System.Threading.Tasks.Task<driver_client.driver.UserInfo[]> GetTeacherStudentsAsync(int tid) {
            return base.Channel.GetTeacherStudentsAsync(tid);
        }
        
        public void UpdateTeacherId(int sid, int tid) {
            base.Channel.UpdateTeacherId(sid, tid);
        }
        
        public System.Threading.Tasks.Task UpdateTeacherIdAsync(int sid, int tid) {
            return base.Channel.UpdateTeacherIdAsync(sid, tid);
        }
        
        public void SetCalendars(string[] AVailableDays, string startDate, string endDate, string[] datesUnavailable, driver_client.driver.Calendars calendars) {
            base.Channel.SetCalendars(AVailableDays, startDate, endDate, datesUnavailable, calendars);
        }
        
        public System.Threading.Tasks.Task SetCalendarsAsync(string[] AVailableDays, string startDate, string endDate, string[] datesUnavailable, driver_client.driver.Calendars calendars) {
            return base.Channel.SetCalendarsAsync(AVailableDays, startDate, endDate, datesUnavailable, calendars);
        }
        
        public bool AddUser(string name, string password, string email, string phone, bool admin, int tID) {
            return base.Channel.AddUser(name, password, email, phone, admin, tID);
        }
        
        public System.Threading.Tasks.Task<bool> AddUserAsync(string name, string password, string email, string phone, bool admin, int tID) {
            return base.Channel.AddUserAsync(name, password, email, phone, admin, tID);
        }
    }
}
